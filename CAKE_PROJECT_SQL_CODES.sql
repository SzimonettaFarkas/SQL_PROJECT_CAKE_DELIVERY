# CAKE DELIVERY PROJECT


CREATE DATABASE CAKE_PROJECT;
USE CAKE_PROJECT;

# creating the tables

CREATE TABLE CAKES (
ID INT,
CAKE_NAME VARCHAR(255),
PRICE FLOAT);

CREATE TABLE ORDERS (
ORDER_ID INT,
CUST_ID INT,
CAKE_ID INT,
ORDER_DATE TIMESTAMP);

CREATE TABLE DELIVERY (
ORDER_ID INT,
EMP_ID INT,
PICK_UP_TIME TIMESTAMP,
DISTANCE INT,
DURATION INT);



# inserting data to the tables

DESC CAKES;
INSERT INTO CAKES VALUES
(1, 'Butter Cake', 4.50),
(2, 'Chocolate Cake', 5.50),
(3, 'Red Velvet Cake', 7.50),
(4, 'Pineapple Cake', 6.50),
(5, 'Coffee Cake', 5.50),
(6, 'Apple Cake', 5.00),
(7, 'Cheesecake', 5.50),
(8, 'Strawberry Cake', 6.50),
(9, 'Lemon Cake', 5.50),
(10, 'Honey Cake', 6.50);

SELECT * FROM CAKES;

INSERT INTO ORDERS VALUES
(1, 101, 6, '2023-01-02 13:20:00'),
(1, 101, 5, '2023-01-02 13:20:00'),
(1, 101, 10, '2023-01-02 13:20:00'),
(1, 101, 4, '2023-01-02 13:20:00'),
(2, 102, 6, '2023-01-02 14:09:00'),
(3, 103, 5, '2023-01-02 15:35:00'),
(4, 104, 2, '2023-01-03 14:11:00'),
(5, 105, 1, '2023-01-03 14:50:00'),
(5, 105, 9, '2023-01-03 14:50:00'),
(6, 101, 8, '2023-01-03 15:26:00'),
(6, 101, 10, '2023-01-03 15:26:00'),
(7, 106, 4, '2023-01-03 15:17:00'),
(8, 103, 7, '2023-01-04 13:56:00'),
(9, 107, 6, '2023-01-04 15:17:00'),
(10, 101, 8, '2023-01-09 14:53:00'),
(10, 101, 10, '2023-01-09 14:53:00'),
(11, 108, 4, '2023-01-09 15:18:00'),
(12, 109, 9, '2023-01-10 14:30:00'),
(12, 109, 4, '2023-01-10 14:30:00'),
(13, 110, 2, '2023-01-10 14:51:00'),
(14, 101, 10, '2023-01-11 13:54:00'),
(14, 101, 6, '2023-01-11 13:54:00'),
(15, 107, 8, '2023-01-11 14:39:00'),
(16, 104, 5, '2023-01-16 14:57:00'),
(17, 101, 4, '2023-01-16 15:35:00'),
(18, 102, 7, '2023-01-17 14:05:00'),
(19, 110, 10, '2023-01-17 14:31:00'),
(20, 101, 4, '2023-01-17 14:59:00'),
(21, 109, 7, '2023-01-18 14:03:00'),
(22, 106, 6, '2023-01-18 14:48:00'),
(23, 101, 5, '2023-01-23 14:47:00'),
(23, 101, 9, '2023-01-23 14:47:00'),
(24, 102, 1, '2023-01-23 15:01:00'),
(25, 109, 2, '2023-01-24 14:57:00'),
(26, 101, 10, '2023-01-25 14:06:00'),
(27, 104, 3, '2023-01-25 14:41:00'),
(28, 110, 8, '2023-01-30 14:18:00'),
(29, 107, 1, '2023-01-30 14:50:00'),
(30, 103, 6, '2023-01-31 14:55');

SELECT * FROM ORDERS;

INSERT INTO DELIVERY VALUES 
(1, 1, '2023-01-02 13:40:00', 1, 11),
(2,3, '2023-01-02 14:14:00', 1, 15),
(3, 1, '2023-01-02 15:40:00', 2, 18),
(4,1, '2023-01-03 14:16:00', 1, 10),
(5, 3, '2023-01-03 15:01:00', 1, 11),
(6, 1, '2023-01-03 15:36:00', 2 ,20),
(7, 3, '2023-01-03 15:22:00', 1, 9),
(8, 1, '2023-01-04 14:01:00', 1, 10),
(9, 2, '2023-01-04 15:22:00', 2, 18),
(10, 1, '2023-01-09 15:03:00', 1, 10),
(11, 2, '2023-01-09 15:23:00', 1, 12),
(12, 1, '2023-01-10 14:40:00', 1 , 9),
(13, 2, '2023-01-10 14:56:00', 1, 8),
(14, 1, '2023-01-11 14:04:00', 2, 18),
(15, 2, '2023-01-11 14:44:00', 1, 10),
(16, 1, '2023-01-16 15:02:00', 2, 19),
(17, 2, '2023-01-16 15:40:00', 1, 10),
(18, 1, '2023-01-17 14:10:00', 2, 15),
(19, 2, '2023-01-17 14:36:00', 1, 10),
(20, 3, '2023-01-17 15:04:00', 1, 8),
(21, 1, '2023-01-18 14:08:00', 1, 11),
(22, 2, '2023-01-18 14:53:00', 3, 28),
(23, 1, '2023-01-23 14:57:00', 1, 12),
(24, 2 , '2023-01-23 15:06;00', 2, 17),
(25, 1, '2023-01-24 15:02:00', 3, 30),
(26, 1, '2023-01-25 14:11:00', 2, 21),
(27, 2, '2023-01-25 14:46:00', 1, 9),
(28, 1, '2023-01-30 14:23:00', 1, 10),
(29, 2, '2023-01-30 14:55:00', 1, 10),
(30, 1, '2023-01-31 15:00:00', 2, 15);

SELECT * FROM DELIVERY;


#  HOW MANY CAKES WERE ORDERED? 
SELECT COUNT(CAKE_ID)  AS NUMBER_OF_ORDERED_CAKES FROM ORDERS;

# How many items were ordered by each customer?
SELECT CUST_ID, COUNT(CAKE_ID) AS NUMBER_OF_PURCHASED_ITEMS 
FROM ORDERS
GROUP BY CUST_ID 
ORDER BY COUNT(CAKE_ID) DESC;


# How much money was made by cake delivery?
SELECT SUM(PRICE) AS INCOME 
FROM ORDERS 
INNER JOIN CAKES 
ON CAKES.ID = ORDERS.CAKE_ID;

# How much the delivery earned with each type of cake?
SELECT CAKE_NAME, SUM(PRICE) AS MONEY_MADE_BY_EACH_TYPE
FROM ORDERS
INNER JOIN CAKES ON CAKES.ID = ORDERS.CAKE_ID
GROUP BY CAKE_NAME
ORDER BY SUM(PRICE) DESC;

# How much money was spent by each costumer?
SELECT CUST_ID, SUM(PRICE) AS MONEY_SPENT_BY_CUSTOMER
FROM ORDERS
INNER JOIN CAKES 
ON CAKES.ID = ORDERS.CAKE_ID
GROUP BY CUST_ID
ORDER BY SUM(PRICE) DESC;

# What was the most ordered item by each customer?
WITH FAVORITE AS (
SELECT CUST_ID, CAKE_NAME, COUNT(CAKE_ID) AS PURCHASES,
DENSE_RANK() OVER(PARTITION BY CUST_ID ORDER BY COUNT(CAKE_ID) DESC) AS NUM 
FROM ORDERS
INNER JOIN CAKES ON CAKES.ID = ORDERS.CAKE_ID
GROUP BY CUST_ID, CAKE_NAME)

SELECT CUST_ID, CAKE_NAME, PURCHASES
FROM FAVORITE WHERE NUM = 1;


# How many unique customer orders were made?
SELECT COUNT(DISTINCT(CUST_ID)) FROM ORDERS;


# How many of each type of cake was delivered?
SELECT CAKE_NAME , COUNT(CAKE_ID) AS NUMBER_OF_SOLD_CAKES
FROM ORDERS 
INNER JOIN CAKES ON CAKES.ID = ORDERS.CAKE_ID
GROUP BY CAKE_NAME;

# What was the maximum number of items delivered in a single order?
SELECT ORDER_ID, COUNT(CAKE_ID) NUMBER_OF_ITEMS FROM ORDERS 
GROUP BY ORDER_ID 
ORDER BY COUNT(CAKE_ID) DESC
LIMIT 1;

# What was the total volume of cakes ordered for each hour of the day?
SELECT EXTRACT(HOUR FROM ORDER_DATE) AS HOUR_DATA , COUNT(DISTINCT(ORDER_ID)) AS NUMBER_OF_ORDERS
FROM ORDERS 
GROUP BY HOUR_DATA;

# What was the volume of orders for each day of the week?
SELECT DAYNAME(ORDER_DATE) AS NAME_OF_THE_DAY, COUNT(DISTINCT(ORDER_ID)) AS NUMBER_OF_ORDERS
FROM ORDERS
GROUP BY NAME_OF_THE_DAY;

# Is there any relationship between the number of cakes and how long the order takes to prepare?
SELECT O.ORDER_ID, COUNT(O.ORDER_ID) AS NUMBER_OF_CAKES, 
TIMESTAMPDIFF(MINUTE, ORDER_DATE, PICK_UP_TIME) AS PREPARING_TIME 
FROM ORDERS AS O
INNER JOIN DELIVERY AS D ON O.ORDER_ID = D.ORDER_ID
GROUP BY O.ORDER_ID, PREPARING_TIME
ORDER BY PREPARING_TIME DESC;

# How many orders were delivered by each runner?
SELECT EMP_ID, COUNT(EMP_ID) AS NUMBER_OF_DELIVERIES 
FROM DELIVERY 
GROUP BY EMP_ID;

# What was the average distance traveled for each customer?
SELECT O.CUST_ID , AVG(D.DISTANCE) 
FROM ORDERS AS O
INNER JOIN DELIVERY AS D ON O.ORDER_ID = D.ORDER_ID
GROUP BY O.CUST_ID;

# WHAT WAS THE AVERAGE DISTANCE TRAVELED FOR ALL THE CUSTOMERS?
SELECT AVG(DISTANCE) 
FROM DELIVERY;

# What was the difference between the longest and shortest delivery times for all orders?
SELECT MAX(DURATION) - MIN(DURATION) AS DIFFERENCE_BETWEEN_LONGEST_AND_SHORTEST_DELIVERY 
FROM DELIVERY;

# What was the average speed for each runner for each delivery and do you notice any trend for these values?
SELECT DISTINCT(O.ORDER_ID),D.EMP_ID, D.DISTANCE*60/DURATION AS SPEED
FROM DELIVERY AS D
INNER JOIN ORDERS AS O ON O.ORDER_ID = D.ORDER_ID
ORDER BY SPEED DESC;
	










